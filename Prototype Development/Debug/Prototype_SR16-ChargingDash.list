
Prototype_SR16-ChargingDash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be4  08003b44  08003b44  00004b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004728  08004728  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004728  08004728  00005728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004730  08004730  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004730  08004730  00005730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004734  08004734  00005734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004738  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  2000000c  08004744  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08004744  00006510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef3d  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237a  00000000  00000000  00014f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  000172f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3f  00000000  00000000  00018050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c52  00000000  00000000  00018a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001154a  00000000  00000000  000326e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1f7c  00000000  00000000  00043c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5ba7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003628  00000000  00000000  000e5bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e9214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003b2c 	.word	0x08003b2c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003b2c 	.word	0x08003b2c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <SRE_Display_Init>:
#include "display.h"
#include "ssd1306.h"
#include "ssd1306_fonts.h"

// Initialization function
void SRE_Display_Init(bool test_mode) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
	ssd1306_Init();
 80004c6:	f000 fb3b 	bl	8000b40 <ssd1306_Init>
	if (test_mode) {
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SRE_Display_Init+0x18>
		SRE_Display_Test();
 80004d0:	f000 f804 	bl	80004dc <SRE_Display_Test>
	}
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <SRE_Display_Test>:

// Function to test display
void SRE_Display_Test() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	ssd1306_Fill(White);
 80004e0:	2001      	movs	r0, #1
 80004e2:	f000 fb97 	bl	8000c14 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80004e6:	f000 fbad 	bl	8000c44 <ssd1306_UpdateScreen>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <SRE_Display_Nav>:

// Function to display navigation
void SRE_Display_Nav() {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af02      	add	r7, sp, #8
	//Navigation title
	char title[] = "Navigation";
 80004f6:	4a11      	ldr	r2, [pc, #68]	@ (800053c <SRE_Display_Nav+0x4c>)
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80004fc:	c303      	stmia	r3!, {r0, r1}
 80004fe:	801a      	strh	r2, [r3, #0]
 8000500:	3302      	adds	r3, #2
 8000502:	0c12      	lsrs	r2, r2, #16
 8000504:	701a      	strb	r2, [r3, #0]
	char retval;

	ssd1306_SetCursor(1, 1);
 8000506:	2101      	movs	r1, #1
 8000508:	2001      	movs	r0, #1
 800050a:	f000 fccd 	bl	8000ea8 <ssd1306_SetCursor>
	retval = ssd1306_WriteString(title, Font_16x15, White);
 800050e:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <SRE_Display_Nav+0x50>)
 8000510:	1d38      	adds	r0, r7, #4
 8000512:	2201      	movs	r2, #1
 8000514:	9200      	str	r2, [sp, #0]
 8000516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000518:	f000 fca0 	bl	8000e5c <ssd1306_WriteString>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]

	// draw line
	ssd1306_Line(0, 10, 127, 10, White);
 8000520:	2301      	movs	r3, #1
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	230a      	movs	r3, #10
 8000526:	227f      	movs	r2, #127	@ 0x7f
 8000528:	210a      	movs	r1, #10
 800052a:	2000      	movs	r0, #0
 800052c:	f000 fcd4 	bl	8000ed8 <ssd1306_Line>

	//
	ssd1306_UpdateScreen();
 8000530:	f000 fb88 	bl	8000c44 <ssd1306_UpdateScreen>
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	08003b44 	.word	0x08003b44
 8000540:	0800471c 	.word	0x0800471c

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fd64 	bl	8001014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f80e 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f8d2 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000554:	f000 f8a0 	bl	8000698 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000558:	f000 f85e 	bl	8000618 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SRE_Display_Init(true);
 800055c:	2001      	movs	r0, #1
 800055e:	f7ff ffad 	bl	80004bc <SRE_Display_Init>
  SRE_Display_Nav();
 8000562:	f7ff ffc5 	bl	80004f0 <SRE_Display_Nav>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000566:	bf00      	nop
 8000568:	e7fd      	b.n	8000566 <main+0x22>
	...

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b096      	sub	sp, #88	@ 0x58
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2244      	movs	r2, #68	@ 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 faa9 	bl	8003ad2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000592:	f001 fd69 	bl	8002068 <HAL_PWREx_ControlVoltageScaling>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800059c:	f000 f92a 	bl	80007f4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a0:	f001 fd44 	bl	800202c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <SystemClock_Config+0xa8>)
 80005a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000614 <SystemClock_Config+0xa8>)
 80005ac:	f023 0318 	bic.w	r3, r3, #24
 80005b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005b4:	2314      	movs	r3, #20
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80005c4:	23a0      	movs	r3, #160	@ 0xa0
 80005c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fd9f 	bl	8002114 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005dc:	f000 f90a 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	2101      	movs	r1, #1
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 f9ed 	bl	80029d8 <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000604:	f000 f8f6 	bl	80007f4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000608:	f002 fd90 	bl	800312c <HAL_RCCEx_EnableMSIPLLMode>
}
 800060c:	bf00      	nop
 800060e:	3758      	adds	r7, #88	@ 0x58
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000

08000618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800061c:	4b1b      	ldr	r3, [pc, #108]	@ (800068c <MX_I2C1_Init+0x74>)
 800061e:	4a1c      	ldr	r2, [pc, #112]	@ (8000690 <MX_I2C1_Init+0x78>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 8000622:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <MX_I2C1_Init+0x74>)
 8000624:	4a1b      	ldr	r2, [pc, #108]	@ (8000694 <MX_I2C1_Init+0x7c>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000628:	4b18      	ldr	r3, [pc, #96]	@ (800068c <MX_I2C1_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062e:	4b17      	ldr	r3, [pc, #92]	@ (800068c <MX_I2C1_Init+0x74>)
 8000630:	2201      	movs	r2, #1
 8000632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b15      	ldr	r3, [pc, #84]	@ (800068c <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b14      	ldr	r3, [pc, #80]	@ (800068c <MX_I2C1_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000640:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_I2C1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000646:	4b11      	ldr	r3, [pc, #68]	@ (800068c <MX_I2C1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000652:	480e      	ldr	r0, [pc, #56]	@ (800068c <MX_I2C1_Init+0x74>)
 8000654:	f001 f835 	bl	80016c2 <HAL_I2C_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800065e:	f000 f8c9 	bl	80007f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000662:	2100      	movs	r1, #0
 8000664:	4809      	ldr	r0, [pc, #36]	@ (800068c <MX_I2C1_Init+0x74>)
 8000666:	f001 fc49 	bl	8001efc <HAL_I2CEx_ConfigAnalogFilter>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000670:	f000 f8c0 	bl	80007f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000674:	2100      	movs	r1, #0
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <MX_I2C1_Init+0x74>)
 8000678:	f001 fc8b 	bl	8001f92 <HAL_I2CEx_ConfigDigitalFilter>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000682:	f000 f8b7 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000028 	.word	0x20000028
 8000690:	40005400 	.word	0x40005400
 8000694:	0060112f 	.word	0x0060112f

08000698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800069c:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 800069e:	4a15      	ldr	r2, [pc, #84]	@ (80006f4 <MX_USART2_UART_Init+0x5c>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_USART2_UART_Init+0x58>)
 80006dc:	f002 fd36 	bl	800314c <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006e6:	f000 f885 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000007c 	.word	0x2000007c
 80006f4:	40004400 	.word	0x40004400

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b37      	ldr	r3, [pc, #220]	@ (80007ec <MX_GPIO_Init+0xf4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	4a36      	ldr	r2, [pc, #216]	@ (80007ec <MX_GPIO_Init+0xf4>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071a:	4b34      	ldr	r3, [pc, #208]	@ (80007ec <MX_GPIO_Init+0xf4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b31      	ldr	r3, [pc, #196]	@ (80007ec <MX_GPIO_Init+0xf4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a30      	ldr	r2, [pc, #192]	@ (80007ec <MX_GPIO_Init+0xf4>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b2e      	ldr	r3, [pc, #184]	@ (80007ec <MX_GPIO_Init+0xf4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b2b      	ldr	r3, [pc, #172]	@ (80007ec <MX_GPIO_Init+0xf4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a2a      	ldr	r2, [pc, #168]	@ (80007ec <MX_GPIO_Init+0xf4>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <MX_GPIO_Init+0xf4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2108      	movs	r1, #8
 800075a:	4825      	ldr	r0, [pc, #148]	@ (80007f0 <MX_GPIO_Init+0xf8>)
 800075c:	f000 ff76 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000760:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000766:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076c:	2301      	movs	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	4619      	mov	r1, r3
 8000776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077a:	f000 fdf5 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800077e:	2308      	movs	r3, #8
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	4816      	ldr	r0, [pc, #88]	@ (80007f0 <MX_GPIO_Init+0xf8>)
 8000796:	f000 fde7 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800079a:	2330      	movs	r3, #48	@ 0x30
 800079c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4619      	mov	r1, r3
 80007ae:	4810      	ldr	r0, [pc, #64]	@ (80007f0 <MX_GPIO_Init+0xf8>)
 80007b0:	f000 fdda 	bl	8001368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2100      	movs	r1, #0
 80007b8:	200a      	movs	r0, #10
 80007ba:	f000 fd9e 	bl	80012fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007be:	200a      	movs	r0, #10
 80007c0:	f000 fdb7 	bl	8001332 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	2017      	movs	r0, #23
 80007ca:	f000 fd96 	bl	80012fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007ce:	2017      	movs	r0, #23
 80007d0:	f000 fdaf 	bl	8001332 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2028      	movs	r0, #40	@ 0x28
 80007da:	f000 fd8e 	bl	80012fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007de:	2028      	movs	r0, #40	@ 0x28
 80007e0:	f000 fda7 	bl	8001332 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40021000 	.word	0x40021000
 80007f0:	48000400 	.word	0x48000400

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <Error_Handler+0x8>

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <HAL_MspInit+0x44>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800080a:	4a0e      	ldr	r2, [pc, #56]	@ (8000844 <HAL_MspInit+0x44>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6613      	str	r3, [r2, #96]	@ 0x60
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <HAL_MspInit+0x44>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <HAL_MspInit+0x44>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000822:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <HAL_MspInit+0x44>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000828:	6593      	str	r3, [r2, #88]	@ 0x58
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <HAL_MspInit+0x44>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b096      	sub	sp, #88	@ 0x58
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	2234      	movs	r2, #52	@ 0x34
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f003 f932 	bl	8003ad2 <memset>
  if(hi2c->Instance==I2C1)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a1f      	ldr	r2, [pc, #124]	@ (80008f0 <HAL_I2C_MspInit+0xa8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d137      	bne.n	80008e8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000878:	2340      	movs	r3, #64	@ 0x40
 800087a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4618      	mov	r0, r3
 8000886:	f002 facb 	bl	8002e20 <HAL_RCCEx_PeriphCLKConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000890:	f7ff ffb0 	bl	80007f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <HAL_I2C_MspInit+0xac>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000898:	4a16      	ldr	r2, [pc, #88]	@ (80008f4 <HAL_I2C_MspInit+0xac>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <HAL_I2C_MspInit+0xac>)
 80008a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ac:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008b0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b2:	2312      	movs	r3, #18
 80008b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008be:	2304      	movs	r3, #4
 80008c0:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008cc:	f000 fd4c 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <HAL_I2C_MspInit+0xac>)
 80008d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d4:	4a07      	ldr	r2, [pc, #28]	@ (80008f4 <HAL_I2C_MspInit+0xac>)
 80008d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008da:	6593      	str	r3, [r2, #88]	@ 0x58
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <HAL_I2C_MspInit+0xac>)
 80008de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80008e8:	bf00      	nop
 80008ea:	3758      	adds	r7, #88	@ 0x58
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40005400 	.word	0x40005400
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b096      	sub	sp, #88	@ 0x58
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	2234      	movs	r2, #52	@ 0x34
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f003 f8da 	bl	8003ad2 <memset>
  if(huart->Instance==USART2)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a28      	ldr	r2, [pc, #160]	@ (80009c4 <HAL_UART_MspInit+0xcc>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d148      	bne.n	80009ba <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000928:	2302      	movs	r3, #2
 800092a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4618      	mov	r0, r3
 8000936:	f002 fa73 	bl	8002e20 <HAL_RCCEx_PeriphCLKConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000940:	f7ff ff58 	bl	80007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000944:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <HAL_UART_MspInit+0xd0>)
 8000946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000948:	4a1f      	ldr	r2, [pc, #124]	@ (80009c8 <HAL_UART_MspInit+0xd0>)
 800094a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800094e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <HAL_UART_MspInit+0xd0>)
 8000952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <HAL_UART_MspInit+0xd0>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000960:	4a19      	ldr	r2, [pc, #100]	@ (80009c8 <HAL_UART_MspInit+0xd0>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <HAL_UART_MspInit+0xd0>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000974:	2304      	movs	r3, #4
 8000976:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000984:	2307      	movs	r3, #7
 8000986:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800098c:	4619      	mov	r1, r3
 800098e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000992:	f000 fce9 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800099a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80009a8:	2303      	movs	r3, #3
 80009aa:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80009b0:	4619      	mov	r1, r3
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b6:	f000 fcd7 	bl	8001368 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009ba:	bf00      	nop
 80009bc:	3758      	adds	r7, #88	@ 0x58
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40021000 	.word	0x40021000

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <NMI_Handler+0x4>

080009d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <MemManage_Handler+0x4>

080009e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a22:	f000 fb4b 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000a2e:	2010      	movs	r0, #16
 8000a30:	f000 fe24 	bl	800167c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	f000 fe1d 	bl	800167c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000a4a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000a4e:	f000 fe15 	bl	800167c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a80:	f7ff ffea 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	@ (8000abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac0 <LoopForever+0xe>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac8 <LoopForever+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f003 f81b 	bl	8003ae4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aae:	f7ff fd49 	bl	8000544 <main>

08000ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac0:	08004738 	.word	0x08004738
  ldr r2, =_sbss
 8000ac4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac8:	20000510 	.word	0x20000510

08000acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_2_IRQHandler>

08000ace <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af04      	add	r7, sp, #16
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	9302      	str	r3, [sp, #8]
 8000aec:	2301      	movs	r3, #1
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2301      	movs	r3, #1
 8000af6:	2200      	movs	r2, #0
 8000af8:	2178      	movs	r1, #120	@ 0x78
 8000afa:	4803      	ldr	r0, [pc, #12]	@ (8000b08 <ssd1306_WriteCommand+0x2c>)
 8000afc:	f000 fe7c 	bl	80017f8 <HAL_I2C_Mem_Write>
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000028 	.word	0x20000028

08000b0c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af04      	add	r7, sp, #16
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1e:	9202      	str	r2, [sp, #8]
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2301      	movs	r3, #1
 8000b28:	2240      	movs	r2, #64	@ 0x40
 8000b2a:	2178      	movs	r1, #120	@ 0x78
 8000b2c:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <ssd1306_WriteData+0x30>)
 8000b2e:	f000 fe63 	bl	80017f8 <HAL_I2C_Mem_Write>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000028 	.word	0x20000028

08000b40 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b44:	f7ff ffc3 	bl	8000ace <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b48:	2064      	movs	r0, #100	@ 0x64
 8000b4a:	f000 fad7 	bl	80010fc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f000 fa42 	bl	8000fd8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b54:	2020      	movs	r0, #32
 8000b56:	f7ff ffc1 	bl	8000adc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff ffbe 	bl	8000adc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b60:	20b0      	movs	r0, #176	@ 0xb0
 8000b62:	f7ff ffbb 	bl	8000adc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000b66:	20c8      	movs	r0, #200	@ 0xc8
 8000b68:	f7ff ffb8 	bl	8000adc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff ffb5 	bl	8000adc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000b72:	2010      	movs	r0, #16
 8000b74:	f7ff ffb2 	bl	8000adc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000b78:	2040      	movs	r0, #64	@ 0x40
 8000b7a:	f7ff ffaf 	bl	8000adc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000b7e:	20ff      	movs	r0, #255	@ 0xff
 8000b80:	f000 fa16 	bl	8000fb0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000b84:	20a1      	movs	r0, #161	@ 0xa1
 8000b86:	f7ff ffa9 	bl	8000adc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000b8a:	20a6      	movs	r0, #166	@ 0xa6
 8000b8c:	f7ff ffa6 	bl	8000adc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000b90:	20a8      	movs	r0, #168	@ 0xa8
 8000b92:	f7ff ffa3 	bl	8000adc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000b96:	203f      	movs	r0, #63	@ 0x3f
 8000b98:	f7ff ffa0 	bl	8000adc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b9c:	20a4      	movs	r0, #164	@ 0xa4
 8000b9e:	f7ff ff9d 	bl	8000adc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000ba2:	20d3      	movs	r0, #211	@ 0xd3
 8000ba4:	f7ff ff9a 	bl	8000adc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff ff97 	bl	8000adc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000bae:	20d5      	movs	r0, #213	@ 0xd5
 8000bb0:	f7ff ff94 	bl	8000adc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000bb4:	20f0      	movs	r0, #240	@ 0xf0
 8000bb6:	f7ff ff91 	bl	8000adc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000bba:	20d9      	movs	r0, #217	@ 0xd9
 8000bbc:	f7ff ff8e 	bl	8000adc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000bc0:	2022      	movs	r0, #34	@ 0x22
 8000bc2:	f7ff ff8b 	bl	8000adc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000bc6:	20da      	movs	r0, #218	@ 0xda
 8000bc8:	f7ff ff88 	bl	8000adc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000bcc:	2012      	movs	r0, #18
 8000bce:	f7ff ff85 	bl	8000adc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000bd2:	20db      	movs	r0, #219	@ 0xdb
 8000bd4:	f7ff ff82 	bl	8000adc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f7ff ff7f 	bl	8000adc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000bde:	208d      	movs	r0, #141	@ 0x8d
 8000be0:	f7ff ff7c 	bl	8000adc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000be4:	2014      	movs	r0, #20
 8000be6:	f7ff ff79 	bl	8000adc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000bea:	2001      	movs	r0, #1
 8000bec:	f000 f9f4 	bl	8000fd8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f000 f80f 	bl	8000c14 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000bf6:	f000 f825 	bl	8000c44 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000bfa:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <ssd1306_Init+0xd0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c00:	4b03      	ldr	r3, [pc, #12]	@ (8000c10 <ssd1306_Init+0xd0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c06:	4b02      	ldr	r3, [pc, #8]	@ (8000c10 <ssd1306_Init+0xd0>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	711a      	strb	r2, [r3, #4]
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000504 	.word	0x20000504

08000c14 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d101      	bne.n	8000c28 <ssd1306_Fill+0x14>
 8000c24:	2300      	movs	r3, #0
 8000c26:	e000      	b.n	8000c2a <ssd1306_Fill+0x16>
 8000c28:	23ff      	movs	r3, #255	@ 0xff
 8000c2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <ssd1306_Fill+0x2c>)
 8000c32:	f002 ff4e 	bl	8003ad2 <memset>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000104 	.word	0x20000104

08000c44 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71fb      	strb	r3, [r7, #7]
 8000c4e:	e016      	b.n	8000c7e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	3b50      	subs	r3, #80	@ 0x50
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff40 	bl	8000adc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff ff3d 	bl	8000adc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000c62:	2010      	movs	r0, #16
 8000c64:	f7ff ff3a 	bl	8000adc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	01db      	lsls	r3, r3, #7
 8000c6c:	4a08      	ldr	r2, [pc, #32]	@ (8000c90 <ssd1306_UpdateScreen+0x4c>)
 8000c6e:	4413      	add	r3, r2
 8000c70:	2180      	movs	r1, #128	@ 0x80
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff4a 	bl	8000b0c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b07      	cmp	r3, #7
 8000c82:	d9e5      	bls.n	8000c50 <ssd1306_UpdateScreen+0xc>
    }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000104 	.word	0x20000104

08000c94 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	71bb      	strb	r3, [r7, #6]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db3d      	blt.n	8000d2a <ssd1306_DrawPixel+0x96>
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cb2:	d83a      	bhi.n	8000d2a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000cb4:	797b      	ldrb	r3, [r7, #5]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d11a      	bne.n	8000cf0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cba:	79fa      	ldrb	r2, [r7, #7]
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	08db      	lsrs	r3, r3, #3
 8000cc0:	b2d8      	uxtb	r0, r3
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	01db      	lsls	r3, r3, #7
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d38 <ssd1306_DrawPixel+0xa4>)
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	b25a      	sxtb	r2, r3
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	f003 0307 	and.w	r3, r3, #7
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b259      	sxtb	r1, r3
 8000ce0:	79fa      	ldrb	r2, [r7, #7]
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	01db      	lsls	r3, r3, #7
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b2c9      	uxtb	r1, r1
 8000cea:	4a13      	ldr	r2, [pc, #76]	@ (8000d38 <ssd1306_DrawPixel+0xa4>)
 8000cec:	54d1      	strb	r1, [r2, r3]
 8000cee:	e01d      	b.n	8000d2c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000cf0:	79fa      	ldrb	r2, [r7, #7]
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	08db      	lsrs	r3, r3, #3
 8000cf6:	b2d8      	uxtb	r0, r3
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	01db      	lsls	r3, r3, #7
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000d38 <ssd1306_DrawPixel+0xa4>)
 8000d00:	5cd3      	ldrb	r3, [r2, r3]
 8000d02:	b25a      	sxtb	r2, r3
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	4013      	ands	r3, r2
 8000d18:	b259      	sxtb	r1, r3
 8000d1a:	79fa      	ldrb	r2, [r7, #7]
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	01db      	lsls	r3, r3, #7
 8000d20:	4413      	add	r3, r2
 8000d22:	b2c9      	uxtb	r1, r1
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <ssd1306_DrawPixel+0xa4>)
 8000d26:	54d1      	strb	r1, [r2, r3]
 8000d28:	e000      	b.n	8000d2c <ssd1306_DrawPixel+0x98>
        return;
 8000d2a:	bf00      	nop
    }
}
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000104 	.word	0x20000104

08000d3c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4604      	mov	r4, r0
 8000d44:	4638      	mov	r0, r7
 8000d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	2b1f      	cmp	r3, #31
 8000d52:	d902      	bls.n	8000d5a <ssd1306_WriteChar+0x1e>
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	2b7e      	cmp	r3, #126	@ 0x7e
 8000d58:	d901      	bls.n	8000d5e <ssd1306_WriteChar+0x22>
        return 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e077      	b.n	8000e4e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e58 <ssd1306_WriteChar+0x11c>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	783b      	ldrb	r3, [r7, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	2b80      	cmp	r3, #128	@ 0x80
 8000d6a:	dc06      	bgt.n	8000d7a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000d6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e58 <ssd1306_WriteChar+0x11c>)
 8000d6e:	885b      	ldrh	r3, [r3, #2]
 8000d70:	461a      	mov	r2, r3
 8000d72:	787b      	ldrb	r3, [r7, #1]
 8000d74:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000d76:	2b40      	cmp	r3, #64	@ 0x40
 8000d78:	dd01      	ble.n	8000d7e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e067      	b.n	8000e4e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	e04e      	b.n	8000e22 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	3b20      	subs	r3, #32
 8000d8a:	7879      	ldrb	r1, [r7, #1]
 8000d8c:	fb01 f303 	mul.w	r3, r1, r3
 8000d90:	4619      	mov	r1, r3
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	440b      	add	r3, r1
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
 8000da2:	e036      	b.n	8000e12 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d013      	beq.n	8000ddc <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000db4:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <ssd1306_WriteChar+0x11c>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b2d8      	uxtb	r0, r3
 8000dc2:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <ssd1306_WriteChar+0x11c>)
 8000dc4:	885b      	ldrh	r3, [r3, #2]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	4413      	add	r3, r2
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f7ff ff5d 	bl	8000c94 <ssd1306_DrawPixel>
 8000dda:	e017      	b.n	8000e0c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <ssd1306_WriteChar+0x11c>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	4413      	add	r3, r2
 8000de8:	b2d8      	uxtb	r0, r3
 8000dea:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <ssd1306_WriteChar+0x11c>)
 8000dec:	885b      	ldrh	r3, [r3, #2]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	b2d9      	uxtb	r1, r3
 8000df8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	bf0c      	ite	eq
 8000e00:	2301      	moveq	r3, #1
 8000e02:	2300      	movne	r3, #0
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	461a      	mov	r2, r3
 8000e08:	f7ff ff44 	bl	8000c94 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	783b      	ldrb	r3, [r7, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d3c3      	bcc.n	8000da4 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	787b      	ldrb	r3, [r7, #1]
 8000e24:	461a      	mov	r2, r3
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d3ab      	bcc.n	8000d84 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <ssd1306_WriteChar+0x11c>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	68ba      	ldr	r2, [r7, #8]
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d005      	beq.n	8000e42 <ssd1306_WriteChar+0x106>
 8000e36:	68b9      	ldr	r1, [r7, #8]
 8000e38:	7bfa      	ldrb	r2, [r7, #15]
 8000e3a:	3a20      	subs	r2, #32
 8000e3c:	440a      	add	r2, r1
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	e000      	b.n	8000e44 <ssd1306_WriteChar+0x108>
 8000e42:	783a      	ldrb	r2, [r7, #0]
 8000e44:	4413      	add	r3, r2
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	4b03      	ldr	r3, [pc, #12]	@ (8000e58 <ssd1306_WriteChar+0x11c>)
 8000e4a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	@ 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd90      	pop	{r4, r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000504 	.word	0x20000504

08000e5c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	4638      	mov	r0, r7
 8000e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000e6a:	e013      	b.n	8000e94 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	7818      	ldrb	r0, [r3, #0]
 8000e70:	7e3b      	ldrb	r3, [r7, #24]
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	463b      	mov	r3, r7
 8000e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e78:	f7ff ff60 	bl	8000d3c <ssd1306_WriteChar>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d002      	beq.n	8000e8e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	e008      	b.n	8000ea0 <ssd1306_WriteString+0x44>
        }
        str++;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	3301      	adds	r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1e7      	bne.n	8000e6c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <ssd1306_SetCursor+0x2c>)
 8000ebe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <ssd1306_SetCursor+0x2c>)
 8000ec6:	805a      	strh	r2, [r3, #2]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	20000504 	.word	0x20000504

08000ed8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b089      	sub	sp, #36	@ 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4604      	mov	r4, r0
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	71fb      	strb	r3, [r7, #7]
 8000eea:	4603      	mov	r3, r0
 8000eec:	71bb      	strb	r3, [r7, #6]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	717b      	strb	r3, [r7, #5]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8000ef6:	797a      	ldrb	r2, [r7, #5]
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bfb8      	it	lt
 8000f00:	425b      	neglt	r3, r3
 8000f02:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8000f04:	793a      	ldrb	r2, [r7, #4]
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bfb8      	it	lt
 8000f0e:	425b      	neglt	r3, r3
 8000f10:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8000f12:	79fa      	ldrb	r2, [r7, #7]
 8000f14:	797b      	ldrb	r3, [r7, #5]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d201      	bcs.n	8000f1e <ssd1306_Line+0x46>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e001      	b.n	8000f22 <ssd1306_Line+0x4a>
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8000f24:	79ba      	ldrb	r2, [r7, #6]
 8000f26:	793b      	ldrb	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d201      	bcs.n	8000f30 <ssd1306_Line+0x58>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e001      	b.n	8000f34 <ssd1306_Line+0x5c>
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8000f3e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000f42:	7939      	ldrb	r1, [r7, #4]
 8000f44:	797b      	ldrb	r3, [r7, #5]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fea4 	bl	8000c94 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8000f4c:	e024      	b.n	8000f98 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8000f4e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000f52:	79b9      	ldrb	r1, [r7, #6]
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fe9c 	bl	8000c94 <ssd1306_DrawPixel>
        error2 = error * 2;
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	425b      	negs	r3, r3
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dd08      	ble.n	8000f7e <ssd1306_Line+0xa6>
            error -= deltaY;
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	da08      	bge.n	8000f98 <ssd1306_Line+0xc0>
            error += deltaX;
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	4413      	add	r3, r2
 8000f96:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8000f98:	79fa      	ldrb	r2, [r7, #7]
 8000f9a:	797b      	ldrb	r3, [r7, #5]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d1d6      	bne.n	8000f4e <ssd1306_Line+0x76>
 8000fa0:	79ba      	ldrb	r2, [r7, #6]
 8000fa2:	793b      	ldrb	r3, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d1d2      	bne.n	8000f4e <ssd1306_Line+0x76>
        }
    }
    return;
 8000fa8:	bf00      	nop
}
 8000faa:	3724      	adds	r7, #36	@ 0x24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd90      	pop	{r4, r7, pc}

08000fb0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000fba:	2381      	movs	r3, #129	@ 0x81
 8000fbc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fd8b 	bl	8000adc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fd87 	bl	8000adc <ssd1306_WriteCommand>
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000fe8:	23af      	movs	r3, #175	@ 0xaf
 8000fea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <ssd1306_SetDisplayOn+0x38>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	715a      	strb	r2, [r3, #5]
 8000ff2:	e004      	b.n	8000ffe <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000ff4:	23ae      	movs	r3, #174	@ 0xae
 8000ff6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000ff8:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <ssd1306_SetDisplayOn+0x38>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fd6b 	bl	8000adc <ssd1306_WriteCommand>
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000504 	.word	0x20000504

08001014 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101e:	2003      	movs	r0, #3
 8001020:	f000 f960 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001024:	2000      	movs	r0, #0
 8001026:	f000 f80d 	bl	8001044 <HAL_InitTick>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	e001      	b.n	800103a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001036:	f7ff fbe3 	bl	8000800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800103a:	79fb      	ldrb	r3, [r7, #7]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001050:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <HAL_InitTick+0x6c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d023      	beq.n	80010a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <HAL_InitTick+0x70>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <HAL_InitTick+0x6c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f96d 	bl	800134e <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10f      	bne.n	800109a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d809      	bhi.n	8001094 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 f937 	bl	80012fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800108c:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <HAL_InitTick+0x74>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e007      	b.n	80010a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e004      	b.n	80010a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e001      	b.n	80010a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000004 	.word	0x20000004

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008
 80010e0:	2000050c 	.word	0x2000050c

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	2000050c 	.word	0x2000050c

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	@ (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e14e      	b.n	8001616 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8140 	beq.w	8001610 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d005      	beq.n	80013a8 <HAL_GPIO_Init+0x40>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d130      	bne.n	800140a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013de:	2201      	movs	r2, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	f003 0201 	and.w	r2, r3, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b03      	cmp	r3, #3
 8001414:	d017      	beq.n	8001446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d123      	bne.n	800149a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	6939      	ldr	r1, [r7, #16]
 8001496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0203 	and.w	r2, r3, #3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 809a 	beq.w	8001610 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014dc:	4b55      	ldr	r3, [pc, #340]	@ (8001634 <HAL_GPIO_Init+0x2cc>)
 80014de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e0:	4a54      	ldr	r2, [pc, #336]	@ (8001634 <HAL_GPIO_Init+0x2cc>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80014e8:	4b52      	ldr	r3, [pc, #328]	@ (8001634 <HAL_GPIO_Init+0x2cc>)
 80014ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f4:	4a50      	ldr	r2, [pc, #320]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800151e:	d013      	beq.n	8001548 <HAL_GPIO_Init+0x1e0>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a46      	ldr	r2, [pc, #280]	@ (800163c <HAL_GPIO_Init+0x2d4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d00d      	beq.n	8001544 <HAL_GPIO_Init+0x1dc>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a45      	ldr	r2, [pc, #276]	@ (8001640 <HAL_GPIO_Init+0x2d8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d007      	beq.n	8001540 <HAL_GPIO_Init+0x1d8>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a44      	ldr	r2, [pc, #272]	@ (8001644 <HAL_GPIO_Init+0x2dc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d101      	bne.n	800153c <HAL_GPIO_Init+0x1d4>
 8001538:	2303      	movs	r3, #3
 800153a:	e006      	b.n	800154a <HAL_GPIO_Init+0x1e2>
 800153c:	2307      	movs	r3, #7
 800153e:	e004      	b.n	800154a <HAL_GPIO_Init+0x1e2>
 8001540:	2302      	movs	r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x1e2>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_GPIO_Init+0x1e2>
 8001548:	2300      	movs	r3, #0
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	f002 0203 	and.w	r2, r2, #3
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	4093      	lsls	r3, r2
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800155a:	4937      	ldr	r1, [pc, #220]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001568:	4b37      	ldr	r3, [pc, #220]	@ (8001648 <HAL_GPIO_Init+0x2e0>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800158c:	4a2e      	ldr	r2, [pc, #184]	@ (8001648 <HAL_GPIO_Init+0x2e0>)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001592:	4b2d      	ldr	r3, [pc, #180]	@ (8001648 <HAL_GPIO_Init+0x2e0>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015b6:	4a24      	ldr	r2, [pc, #144]	@ (8001648 <HAL_GPIO_Init+0x2e0>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015bc:	4b22      	ldr	r3, [pc, #136]	@ (8001648 <HAL_GPIO_Init+0x2e0>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015e0:	4a19      	ldr	r2, [pc, #100]	@ (8001648 <HAL_GPIO_Init+0x2e0>)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015e6:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <HAL_GPIO_Init+0x2e0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800160a:	4a0f      	ldr	r2, [pc, #60]	@ (8001648 <HAL_GPIO_Init+0x2e0>)
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	f47f aea9 	bne.w	8001378 <HAL_GPIO_Init+0x10>
  }
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40021000 	.word	0x40021000
 8001638:	40010000 	.word	0x40010000
 800163c:	48000400 	.word	0x48000400
 8001640:	48000800 	.word	0x48000800
 8001644:	48000c00 	.word	0x48000c00
 8001648:	40010400 	.word	0x40010400

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001668:	e002      	b.n	8001670 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001686:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001692:	4a05      	ldr	r2, [pc, #20]	@ (80016a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f806 	bl	80016ac <HAL_GPIO_EXTI_Callback>
  }
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40010400 	.word	0x40010400

080016ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e08d      	b.n	80017f0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d106      	bne.n	80016ee <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff f8ad 	bl	8000848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2224      	movs	r2, #36	@ 0x24
 80016f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001712:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001722:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d107      	bne.n	800173c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	e006      	b.n	800174a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001748:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d108      	bne.n	8001764 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	e007      	b.n	8001774 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001772:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001786:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001796:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69d9      	ldr	r1, [r3, #28]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1a      	ldr	r2, [r3, #32]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0201 	orr.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2220      	movs	r2, #32
 80017dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	4608      	mov	r0, r1
 8001802:	4611      	mov	r1, r2
 8001804:	461a      	mov	r2, r3
 8001806:	4603      	mov	r3, r0
 8001808:	817b      	strh	r3, [r7, #10]
 800180a:	460b      	mov	r3, r1
 800180c:	813b      	strh	r3, [r7, #8]
 800180e:	4613      	mov	r3, r2
 8001810:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b20      	cmp	r3, #32
 800181c:	f040 80f9 	bne.w	8001a12 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <HAL_I2C_Mem_Write+0x34>
 8001826:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001832:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0ed      	b.n	8001a14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_I2C_Mem_Write+0x4e>
 8001842:	2302      	movs	r3, #2
 8001844:	e0e6      	b.n	8001a14 <HAL_I2C_Mem_Write+0x21c>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800184e:	f7ff fc49 	bl	80010e4 <HAL_GetTick>
 8001852:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2319      	movs	r3, #25
 800185a:	2201      	movs	r2, #1
 800185c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 f955 	bl	8001b10 <I2C_WaitOnFlagUntilTimeout>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0d1      	b.n	8001a14 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2221      	movs	r2, #33	@ 0x21
 8001874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2240      	movs	r2, #64	@ 0x40
 800187c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6a3a      	ldr	r2, [r7, #32]
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001890:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001898:	88f8      	ldrh	r0, [r7, #6]
 800189a:	893a      	ldrh	r2, [r7, #8]
 800189c:	8979      	ldrh	r1, [r7, #10]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	4603      	mov	r3, r0
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 f8b9 	bl	8001a20 <I2C_RequestMemoryWrite>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0a9      	b.n	8001a14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	2bff      	cmp	r3, #255	@ 0xff
 80018c8:	d90e      	bls.n	80018e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	22ff      	movs	r2, #255	@ 0xff
 80018ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	8979      	ldrh	r1, [r7, #10]
 80018d8:	2300      	movs	r3, #0
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 fad9 	bl	8001e98 <I2C_TransferConfig>
 80018e6:	e00f      	b.n	8001908 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	8979      	ldrh	r1, [r7, #10]
 80018fa:	2300      	movs	r3, #0
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 fac8 	bl	8001e98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f958 	bl	8001bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e07b      	b.n	8001a14 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001920:	781a      	ldrb	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001936:	b29b      	uxth	r3, r3
 8001938:	3b01      	subs	r3, #1
 800193a:	b29a      	uxth	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001944:	3b01      	subs	r3, #1
 8001946:	b29a      	uxth	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001950:	b29b      	uxth	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d034      	beq.n	80019c0 <HAL_I2C_Mem_Write+0x1c8>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195a:	2b00      	cmp	r3, #0
 800195c:	d130      	bne.n	80019c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001964:	2200      	movs	r2, #0
 8001966:	2180      	movs	r1, #128	@ 0x80
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 f8d1 	bl	8001b10 <I2C_WaitOnFlagUntilTimeout>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e04d      	b.n	8001a14 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197c:	b29b      	uxth	r3, r3
 800197e:	2bff      	cmp	r3, #255	@ 0xff
 8001980:	d90e      	bls.n	80019a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	22ff      	movs	r2, #255	@ 0xff
 8001986:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800198c:	b2da      	uxtb	r2, r3
 800198e:	8979      	ldrh	r1, [r7, #10]
 8001990:	2300      	movs	r3, #0
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 fa7d 	bl	8001e98 <I2C_TransferConfig>
 800199e:	e00f      	b.n	80019c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	8979      	ldrh	r1, [r7, #10]
 80019b2:	2300      	movs	r3, #0
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 fa6c 	bl	8001e98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d19e      	bne.n	8001908 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f93e 	bl	8001c50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e01a      	b.n	8001a14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2220      	movs	r2, #32
 80019e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_I2C_Mem_Write+0x224>)
 80019f2:	400b      	ands	r3, r1
 80019f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2220      	movs	r2, #32
 80019fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001a12:	2302      	movs	r3, #2
  }
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	fe00e800 	.word	0xfe00e800

08001a20 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	4608      	mov	r0, r1
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4603      	mov	r3, r0
 8001a30:	817b      	strh	r3, [r7, #10]
 8001a32:	460b      	mov	r3, r1
 8001a34:	813b      	strh	r3, [r7, #8]
 8001a36:	4613      	mov	r3, r2
 8001a38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	8979      	ldrh	r1, [r7, #10]
 8001a40:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <I2C_RequestMemoryWrite+0xa4>)
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 fa25 	bl	8001e98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	69b9      	ldr	r1, [r7, #24]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 f8b5 	bl	8001bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e02c      	b.n	8001abc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d105      	bne.n	8001a74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a68:	893b      	ldrh	r3, [r7, #8]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a72:	e015      	b.n	8001aa0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a74:	893b      	ldrh	r3, [r7, #8]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	69b9      	ldr	r1, [r7, #24]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f89b 	bl	8001bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e012      	b.n	8001abc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a96:	893b      	ldrh	r3, [r7, #8]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2180      	movs	r1, #128	@ 0x80
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 f830 	bl	8001b10 <I2C_WaitOnFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	80002000 	.word	0x80002000

08001ac8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d103      	bne.n	8001ae6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d007      	beq.n	8001b04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	619a      	str	r2, [r3, #24]
  }
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b20:	e03b      	b.n	8001b9a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	6839      	ldr	r1, [r7, #0]
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 f8d6 	bl	8001cd8 <I2C_IsErrorOccurred>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e041      	b.n	8001bba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d02d      	beq.n	8001b9a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3e:	f7ff fad1 	bl	80010e4 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d302      	bcc.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d122      	bne.n	8001b9a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	bf0c      	ite	eq
 8001b64:	2301      	moveq	r3, #1
 8001b66:	2300      	movne	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d113      	bne.n	8001b9a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	f043 0220 	orr.w	r2, r3, #32
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2220      	movs	r2, #32
 8001b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	699a      	ldr	r2, [r3, #24]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	bf0c      	ite	eq
 8001baa:	2301      	moveq	r3, #1
 8001bac:	2300      	movne	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d0b4      	beq.n	8001b22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bce:	e033      	b.n	8001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f87f 	bl	8001cd8 <I2C_IsErrorOccurred>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e031      	b.n	8001c48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bea:	d025      	beq.n	8001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bec:	f7ff fa7a 	bl	80010e4 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d302      	bcc.n	8001c02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d11a      	bne.n	8001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d013      	beq.n	8001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c14:	f043 0220 	orr.w	r2, r3, #32
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e007      	b.n	8001c48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d1c4      	bne.n	8001bd0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c5c:	e02f      	b.n	8001cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f838 	bl	8001cd8 <I2C_IsErrorOccurred>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e02d      	b.n	8001cce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c72:	f7ff fa37 	bl	80010e4 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d302      	bcc.n	8001c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d11a      	bne.n	8001cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d013      	beq.n	8001cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f043 0220 	orr.w	r2, r3, #32
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e007      	b.n	8001cce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	d1c8      	bne.n	8001c5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	@ 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d068      	beq.n	8001dd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2210      	movs	r2, #16
 8001d0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d0c:	e049      	b.n	8001da2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d045      	beq.n	8001da2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d16:	f7ff f9e5 	bl	80010e4 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d302      	bcc.n	8001d2c <I2C_IsErrorOccurred+0x54>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d13a      	bne.n	8001da2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d4e:	d121      	bne.n	8001d94 <I2C_IsErrorOccurred+0xbc>
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d56:	d01d      	beq.n	8001d94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d58:	7cfb      	ldrb	r3, [r7, #19]
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	d01a      	beq.n	8001d94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d6e:	f7ff f9b9 	bl	80010e4 <HAL_GetTick>
 8001d72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d74:	e00e      	b.n	8001d94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d76:	f7ff f9b5 	bl	80010e4 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b19      	cmp	r3, #25
 8001d82:	d907      	bls.n	8001d94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	f043 0320 	orr.w	r3, r3, #32
 8001d8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001d92:	e006      	b.n	8001da2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d1e9      	bne.n	8001d76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b20      	cmp	r3, #32
 8001dae:	d003      	beq.n	8001db8 <I2C_IsErrorOccurred+0xe0>
 8001db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0aa      	beq.n	8001d0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d103      	bne.n	8001dc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00b      	beq.n	8001e00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001df8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	f043 0308 	orr.w	r3, r3, #8
 8001e10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00b      	beq.n	8001e44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	f043 0302 	orr.w	r3, r3, #2
 8001e32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001e44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01c      	beq.n	8001e86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f7ff fe3b 	bl	8001ac8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e94 <I2C_IsErrorOccurred+0x1bc>)
 8001e5e:	400b      	ands	r3, r1
 8001e60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001e86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3728      	adds	r7, #40	@ 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	fe00e800 	.word	0xfe00e800

08001e98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	817b      	strh	r3, [r7, #10]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eaa:	897b      	ldrh	r3, [r7, #10]
 8001eac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eb0:	7a7b      	ldrb	r3, [r7, #9]
 8001eb2:	041b      	lsls	r3, r3, #16
 8001eb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ec6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	0d5b      	lsrs	r3, r3, #21
 8001ed2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <I2C_TransferConfig+0x60>)
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	43db      	mvns	r3, r3
 8001edc:	ea02 0103 	and.w	r1, r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	03ff63ff 	.word	0x03ff63ff

08001efc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	d138      	bne.n	8001f84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e032      	b.n	8001f86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2224      	movs	r2, #36	@ 0x24
 8001f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6819      	ldr	r1, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	e000      	b.n	8001f86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f84:	2302      	movs	r3, #2
  }
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b085      	sub	sp, #20
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d139      	bne.n	800201c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e033      	b.n	800201e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2224      	movs	r2, #36	@ 0x24
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fe4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	e000      	b.n	800201e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800201c:	2302      	movs	r3, #2
  }
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800203a:	6013      	str	r3, [r2, #0]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40007000 	.word	0x40007000

0800204c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002050:	4b04      	ldr	r3, [pc, #16]	@ (8002064 <HAL_PWREx_GetVoltageRange+0x18>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40007000 	.word	0x40007000

08002068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002076:	d130      	bne.n	80020da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002078:	4b23      	ldr	r3, [pc, #140]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002084:	d038      	beq.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002086:	4b20      	ldr	r3, [pc, #128]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800208e:	4a1e      	ldr	r2, [pc, #120]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002090:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002094:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002096:	4b1d      	ldr	r3, [pc, #116]	@ (800210c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2232      	movs	r2, #50	@ 0x32
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0c9b      	lsrs	r3, r3, #18
 80020a8:	3301      	adds	r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ac:	e002      	b.n	80020b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b4:	4b14      	ldr	r3, [pc, #80]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020c0:	d102      	bne.n	80020c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f2      	bne.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020d4:	d110      	bne.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e00f      	b.n	80020fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020da:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e6:	d007      	beq.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020e8:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020f0:	4a05      	ldr	r2, [pc, #20]	@ (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40007000 	.word	0x40007000
 800210c:	20000000 	.word	0x20000000
 8002110:	431bde83 	.word	0x431bde83

08002114 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	@ 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	f000 bc4f 	b.w	80029c6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002128:	4b97      	ldr	r3, [pc, #604]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002132:	4b95      	ldr	r3, [pc, #596]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80e6 	beq.w	8002316 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_RCC_OscConfig+0x4c>
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	2b0c      	cmp	r3, #12
 8002154:	f040 808d 	bne.w	8002272 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	2b01      	cmp	r3, #1
 800215c:	f040 8089 	bne.w	8002272 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002160:	4b89      	ldr	r3, [pc, #548]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_RCC_OscConfig+0x66>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	f000 bc26 	b.w	80029c6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800217e:	4b82      	ldr	r3, [pc, #520]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <HAL_RCC_OscConfig+0x80>
 800218a:	4b7f      	ldr	r3, [pc, #508]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002192:	e005      	b.n	80021a0 <HAL_RCC_OscConfig+0x8c>
 8002194:	4b7c      	ldr	r3, [pc, #496]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d224      	bcs.n	80021ee <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fdd9 	bl	8002d60 <RCC_SetFlashLatencyFromMSIRange>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f000 bc06 	b.w	80029c6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ba:	4b73      	ldr	r3, [pc, #460]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a72      	ldr	r2, [pc, #456]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b70      	ldr	r3, [pc, #448]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	496d      	ldr	r1, [pc, #436]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	4968      	ldr	r1, [pc, #416]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	e025      	b.n	800223a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ee:	4b66      	ldr	r3, [pc, #408]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a65      	ldr	r2, [pc, #404]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b63      	ldr	r3, [pc, #396]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	4960      	ldr	r1, [pc, #384]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800220c:	4b5e      	ldr	r3, [pc, #376]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	495b      	ldr	r1, [pc, #364]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fd98 	bl	8002d60 <RCC_SetFlashLatencyFromMSIRange>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e3c5      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800223a:	f000 fccd 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 800223e:	4602      	mov	r2, r0
 8002240:	4b51      	ldr	r3, [pc, #324]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	4950      	ldr	r1, [pc, #320]	@ (800238c <HAL_RCC_OscConfig+0x278>)
 800224c:	5ccb      	ldrb	r3, [r1, r3]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	4a4e      	ldr	r2, [pc, #312]	@ (8002390 <HAL_RCC_OscConfig+0x27c>)
 8002258:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800225a:	4b4e      	ldr	r3, [pc, #312]	@ (8002394 <HAL_RCC_OscConfig+0x280>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fef0 	bl	8001044 <HAL_InitTick>
 8002264:	4603      	mov	r3, r0
 8002266:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d052      	beq.n	8002314 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	e3a9      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d032      	beq.n	80022e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800227a:	4b43      	ldr	r3, [pc, #268]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a42      	ldr	r2, [pc, #264]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002286:	f7fe ff2d 	bl	80010e4 <HAL_GetTick>
 800228a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800228e:	f7fe ff29 	bl	80010e4 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e392      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a0:	4b39      	ldr	r3, [pc, #228]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ac:	4b36      	ldr	r3, [pc, #216]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a35      	ldr	r2, [pc, #212]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b33      	ldr	r3, [pc, #204]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	4930      	ldr	r1, [pc, #192]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	492b      	ldr	r1, [pc, #172]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
 80022de:	e01a      	b.n	8002316 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022e0:	4b29      	ldr	r3, [pc, #164]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a28      	ldr	r2, [pc, #160]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ec:	f7fe fefa 	bl	80010e4 <HAL_GetTick>
 80022f0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f4:	f7fe fef6 	bl	80010e4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e35f      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x1e0>
 8002312:	e000      	b.n	8002316 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002314:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d073      	beq.n	800240a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d005      	beq.n	8002334 <HAL_RCC_OscConfig+0x220>
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	2b0c      	cmp	r3, #12
 800232c:	d10e      	bne.n	800234c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d10b      	bne.n	800234c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	4b14      	ldr	r3, [pc, #80]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d063      	beq.n	8002408 <HAL_RCC_OscConfig+0x2f4>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d15f      	bne.n	8002408 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e33c      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002354:	d106      	bne.n	8002364 <HAL_RCC_OscConfig+0x250>
 8002356:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a0b      	ldr	r2, [pc, #44]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e025      	b.n	80023b0 <HAL_RCC_OscConfig+0x29c>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800236c:	d114      	bne.n	8002398 <HAL_RCC_OscConfig+0x284>
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a05      	ldr	r2, [pc, #20]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b03      	ldr	r3, [pc, #12]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a02      	ldr	r2, [pc, #8]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e013      	b.n	80023b0 <HAL_RCC_OscConfig+0x29c>
 8002388:	40021000 	.word	0x40021000
 800238c:	08003b50 	.word	0x08003b50
 8002390:	20000000 	.word	0x20000000
 8002394:	20000004 	.word	0x20000004
 8002398:	4b8f      	ldr	r3, [pc, #572]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a8e      	ldr	r2, [pc, #568]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800239e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b8c      	ldr	r3, [pc, #560]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a8b      	ldr	r2, [pc, #556]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe fe94 	bl	80010e4 <HAL_GetTick>
 80023bc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c0:	f7fe fe90 	bl	80010e4 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	@ 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e2f9      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d2:	4b81      	ldr	r3, [pc, #516]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x2ac>
 80023de:	e014      	b.n	800240a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fe80 	bl	80010e4 <HAL_GetTick>
 80023e4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe fe7c 	bl	80010e4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	@ 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e2e5      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023fa:	4b77      	ldr	r3, [pc, #476]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2d4>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d060      	beq.n	80024d8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	2b04      	cmp	r3, #4
 800241a:	d005      	beq.n	8002428 <HAL_RCC_OscConfig+0x314>
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d119      	bne.n	8002456 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d116      	bne.n	8002456 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002428:	4b6b      	ldr	r3, [pc, #428]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_OscConfig+0x32c>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e2c2      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b65      	ldr	r3, [pc, #404]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	4962      	ldr	r1, [pc, #392]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002454:	e040      	b.n	80024d8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d023      	beq.n	80024a6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245e:	4b5e      	ldr	r3, [pc, #376]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a5d      	ldr	r2, [pc, #372]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7fe fe3b 	bl	80010e4 <HAL_GetTick>
 800246e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002472:	f7fe fe37 	bl	80010e4 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e2a0      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002484:	4b54      	ldr	r3, [pc, #336]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b51      	ldr	r3, [pc, #324]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	494e      	ldr	r1, [pc, #312]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
 80024a4:	e018      	b.n	80024d8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b4c      	ldr	r3, [pc, #304]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a4b      	ldr	r2, [pc, #300]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe fe17 	bl	80010e4 <HAL_GetTick>
 80024b6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ba:	f7fe fe13 	bl	80010e4 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e27c      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024cc:	4b42      	ldr	r3, [pc, #264]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 8082 	beq.w	80025ea <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d05f      	beq.n	80025ae <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80024ee:	4b3a      	ldr	r3, [pc, #232]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024f4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	429a      	cmp	r2, r3
 8002502:	d037      	beq.n	8002574 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e254      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d01b      	beq.n	800255e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002526:	4b2c      	ldr	r3, [pc, #176]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800252c:	4a2a      	ldr	r2, [pc, #168]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002536:	f7fe fdd5 	bl	80010e4 <HAL_GetTick>
 800253a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253e:	f7fe fdd1 	bl	80010e4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b11      	cmp	r3, #17
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e23a      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002550:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ef      	bne.n	800253e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800255e:	4b1e      	ldr	r3, [pc, #120]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002564:	f023 0210 	bic.w	r2, r3, #16
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	491a      	ldr	r1, [pc, #104]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002574:	4b18      	ldr	r3, [pc, #96]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800257a:	4a17      	ldr	r2, [pc, #92]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7fe fdae 	bl	80010e4 <HAL_GetTick>
 8002588:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258c:	f7fe fdaa 	bl	80010e4 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b11      	cmp	r3, #17
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e213      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800259e:	4b0e      	ldr	r3, [pc, #56]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0ef      	beq.n	800258c <HAL_RCC_OscConfig+0x478>
 80025ac:	e01d      	b.n	80025ea <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ae:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025b4:	4a08      	ldr	r2, [pc, #32]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7fe fd91 	bl	80010e4 <HAL_GetTick>
 80025c2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c6:	f7fe fd8d 	bl	80010e4 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b11      	cmp	r3, #17
 80025d2:	d903      	bls.n	80025dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e1f6      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
 80025d8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025dc:	4ba9      	ldr	r3, [pc, #676]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 80025de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1ed      	bne.n	80025c6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80bd 	beq.w	8002772 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025fe:	4ba1      	ldr	r3, [pc, #644]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10e      	bne.n	8002628 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	4b9e      	ldr	r3, [pc, #632]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260e:	4a9d      	ldr	r2, [pc, #628]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 8002610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002614:	6593      	str	r3, [r2, #88]	@ 0x58
 8002616:	4b9b      	ldr	r3, [pc, #620]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 8002618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002622:	2301      	movs	r3, #1
 8002624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002628:	4b97      	ldr	r3, [pc, #604]	@ (8002888 <HAL_RCC_OscConfig+0x774>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d118      	bne.n	8002666 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002634:	4b94      	ldr	r3, [pc, #592]	@ (8002888 <HAL_RCC_OscConfig+0x774>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a93      	ldr	r2, [pc, #588]	@ (8002888 <HAL_RCC_OscConfig+0x774>)
 800263a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002640:	f7fe fd50 	bl	80010e4 <HAL_GetTick>
 8002644:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002648:	f7fe fd4c 	bl	80010e4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e1b5      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265a:	4b8b      	ldr	r3, [pc, #556]	@ (8002888 <HAL_RCC_OscConfig+0x774>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d02c      	beq.n	80026cc <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002672:	4b84      	ldr	r3, [pc, #528]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002678:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002684:	497f      	ldr	r1, [pc, #508]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d010      	beq.n	80026ba <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002698:	4b7a      	ldr	r3, [pc, #488]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269e:	4a79      	ldr	r2, [pc, #484]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 80026a0:	f043 0304 	orr.w	r3, r3, #4
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80026a8:	4b76      	ldr	r3, [pc, #472]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ae:	4a75      	ldr	r2, [pc, #468]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026b8:	e018      	b.n	80026ec <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80026ba:	4b72      	ldr	r3, [pc, #456]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c0:	4a70      	ldr	r2, [pc, #448]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026ca:	e00f      	b.n	80026ec <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80026cc:	4b6d      	ldr	r3, [pc, #436]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d2:	4a6c      	ldr	r2, [pc, #432]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80026dc:	4b69      	ldr	r3, [pc, #420]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e2:	4a68      	ldr	r2, [pc, #416]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d016      	beq.n	8002722 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7fe fcf6 	bl	80010e4 <HAL_GetTick>
 80026f8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fe fcf2 	bl	80010e4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e159      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002712:	4b5c      	ldr	r3, [pc, #368]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0ed      	beq.n	80026fc <HAL_RCC_OscConfig+0x5e8>
 8002720:	e01d      	b.n	800275e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7fe fcdf 	bl	80010e4 <HAL_GetTick>
 8002726:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7fe fcdb 	bl	80010e4 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e142      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002740:	4b50      	ldr	r3, [pc, #320]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1ed      	bne.n	800272a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800274e:	4b4d      	ldr	r3, [pc, #308]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002754:	4a4b      	ldr	r2, [pc, #300]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 8002756:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800275a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800275e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002762:	2b01      	cmp	r3, #1
 8002764:	d105      	bne.n	8002772 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4b47      	ldr	r3, [pc, #284]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276a:	4a46      	ldr	r2, [pc, #280]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 800276c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002770:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0320 	and.w	r3, r3, #32
 800277a:	2b00      	cmp	r3, #0
 800277c:	d03c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002782:	2b00      	cmp	r3, #0
 8002784:	d01c      	beq.n	80027c0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002786:	4b3f      	ldr	r3, [pc, #252]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 8002788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800278c:	4a3d      	ldr	r2, [pc, #244]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002796:	f7fe fca5 	bl	80010e4 <HAL_GetTick>
 800279a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800279e:	f7fe fca1 	bl	80010e4 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e10a      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027b0:	4b34      	ldr	r3, [pc, #208]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 80027b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0ef      	beq.n	800279e <HAL_RCC_OscConfig+0x68a>
 80027be:	e01b      	b.n	80027f8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027c0:	4b30      	ldr	r3, [pc, #192]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 80027c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7fe fc88 	bl	80010e4 <HAL_GetTick>
 80027d4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d8:	f7fe fc84 	bl	80010e4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0ed      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027ea:	4b26      	ldr	r3, [pc, #152]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 80027ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ef      	bne.n	80027d8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80e1 	beq.w	80029c4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002806:	2b02      	cmp	r3, #2
 8002808:	f040 80b5 	bne.w	8002976 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800280c:	4b1d      	ldr	r3, [pc, #116]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f003 0203 	and.w	r2, r3, #3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281c:	429a      	cmp	r2, r3
 800281e:	d124      	bne.n	800286a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282a:	3b01      	subs	r3, #1
 800282c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d11b      	bne.n	800286a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d113      	bne.n	800286a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	3b01      	subs	r3, #1
 8002850:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d109      	bne.n	800286a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	3b01      	subs	r3, #1
 8002864:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d05f      	beq.n	800292a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	2b0c      	cmp	r3, #12
 800286e:	d05a      	beq.n	8002926 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002870:	4b04      	ldr	r3, [pc, #16]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a03      	ldr	r2, [pc, #12]	@ (8002884 <HAL_RCC_OscConfig+0x770>)
 8002876:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800287a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800287c:	f7fe fc32 	bl	80010e4 <HAL_GetTick>
 8002880:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002882:	e00c      	b.n	800289e <HAL_RCC_OscConfig+0x78a>
 8002884:	40021000 	.word	0x40021000
 8002888:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe fc2a 	bl	80010e4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e093      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289e:	4b4c      	ldr	r3, [pc, #304]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028aa:	4b49      	ldr	r3, [pc, #292]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	4b49      	ldr	r3, [pc, #292]	@ (80029d4 <HAL_RCC_OscConfig+0x8c0>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028ba:	3a01      	subs	r2, #1
 80028bc:	0112      	lsls	r2, r2, #4
 80028be:	4311      	orrs	r1, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028c4:	0212      	lsls	r2, r2, #8
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028cc:	0852      	lsrs	r2, r2, #1
 80028ce:	3a01      	subs	r2, #1
 80028d0:	0552      	lsls	r2, r2, #21
 80028d2:	4311      	orrs	r1, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028d8:	0852      	lsrs	r2, r2, #1
 80028da:	3a01      	subs	r2, #1
 80028dc:	0652      	lsls	r2, r2, #25
 80028de:	430a      	orrs	r2, r1
 80028e0:	493b      	ldr	r1, [pc, #236]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028e6:	4b3a      	ldr	r3, [pc, #232]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a39      	ldr	r2, [pc, #228]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 80028ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028f0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028f2:	4b37      	ldr	r3, [pc, #220]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	4a36      	ldr	r2, [pc, #216]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 80028f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028fc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028fe:	f7fe fbf1 	bl	80010e4 <HAL_GetTick>
 8002902:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002906:	f7fe fbed 	bl	80010e4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e056      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002918:	4b2d      	ldr	r3, [pc, #180]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002924:	e04e      	b.n	80029c4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e04d      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292a:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d146      	bne.n	80029c4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002936:	4b26      	ldr	r3, [pc, #152]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a25      	ldr	r2, [pc, #148]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 800293c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002940:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002942:	4b23      	ldr	r3, [pc, #140]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	4a22      	ldr	r2, [pc, #136]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 8002948:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800294c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800294e:	f7fe fbc9 	bl	80010e4 <HAL_GetTick>
 8002952:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002956:	f7fe fbc5 	bl	80010e4 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e02e      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002968:	4b19      	ldr	r3, [pc, #100]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x842>
 8002974:	e026      	b.n	80029c4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	2b0c      	cmp	r3, #12
 800297a:	d021      	beq.n	80029c0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297c:	4b14      	ldr	r3, [pc, #80]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a13      	ldr	r2, [pc, #76]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 8002982:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fbac 	bl	80010e4 <HAL_GetTick>
 800298c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fba8 	bl	80010e4 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e011      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a2:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80029ae:	4b08      	ldr	r3, [pc, #32]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	4a07      	ldr	r2, [pc, #28]	@ (80029d0 <HAL_RCC_OscConfig+0x8bc>)
 80029b4:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80029b8:	f023 0303 	bic.w	r3, r3, #3
 80029bc:	60d3      	str	r3, [r2, #12]
 80029be:	e001      	b.n	80029c4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3728      	adds	r7, #40	@ 0x28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	f99f808c 	.word	0xf99f808c

080029d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0e7      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b75      	ldr	r3, [pc, #468]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d910      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b72      	ldr	r3, [pc, #456]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4970      	ldr	r1, [pc, #448]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b6e      	ldr	r3, [pc, #440]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0cf      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d010      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	4b66      	ldr	r3, [pc, #408]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d908      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b63      	ldr	r3, [pc, #396]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4960      	ldr	r1, [pc, #384]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d04c      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5e:	4b5a      	ldr	r3, [pc, #360]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d121      	bne.n	8002aae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0a6      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a76:	4b54      	ldr	r3, [pc, #336]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d115      	bne.n	8002aae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e09a      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e08e      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e086      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aae:	4b46      	ldr	r3, [pc, #280]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4943      	ldr	r1, [pc, #268]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac0:	f7fe fb10 	bl	80010e4 <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac8:	f7fe fb0c 	bl	80010e4 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e06e      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 020c 	and.w	r2, r3, #12
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d1eb      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d010      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	4b31      	ldr	r3, [pc, #196]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d208      	bcs.n	8002b1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	492b      	ldr	r1, [pc, #172]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1e:	4b29      	ldr	r3, [pc, #164]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d210      	bcs.n	8002b4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2c:	4b25      	ldr	r3, [pc, #148]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 0207 	bic.w	r2, r3, #7
 8002b34:	4923      	ldr	r1, [pc, #140]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3c:	4b21      	ldr	r3, [pc, #132]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e036      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	4918      	ldr	r1, [pc, #96]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d009      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b78:	4b13      	ldr	r3, [pc, #76]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4910      	ldr	r1, [pc, #64]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b8c:	f000 f824 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	490b      	ldr	r1, [pc, #44]	@ (8002bcc <HAL_RCC_ClockConfig+0x1f4>)
 8002b9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba8:	4a09      	ldr	r2, [pc, #36]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f8>)
 8002baa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bac:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1fc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe fa47 	bl	8001044 <HAL_InitTick>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bba:	7afb      	ldrb	r3, [r7, #11]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40022000 	.word	0x40022000
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	08003b50 	.word	0x08003b50
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	20000004 	.word	0x20000004

08002bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	@ 0x24
 8002bdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x34>
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d121      	bne.n	8002c4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d11e      	bne.n	8002c4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c0c:	4b34      	ldr	r3, [pc, #208]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c18:	4b31      	ldr	r3, [pc, #196]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	e005      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c28:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c34:	4a2b      	ldr	r2, [pc, #172]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10d      	bne.n	8002c60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d102      	bne.n	8002c56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c50:	4b25      	ldr	r3, [pc, #148]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	e004      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c5c:	4b23      	ldr	r3, [pc, #140]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x114>)
 8002c5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	2b0c      	cmp	r3, #12
 8002c64:	d134      	bne.n	8002cd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d003      	beq.n	8002c7e <HAL_RCC_GetSysClockFreq+0xa6>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d003      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0xac>
 8002c7c:	e005      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c80:	617b      	str	r3, [r7, #20]
      break;
 8002c82:	e005      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c84:	4b19      	ldr	r3, [pc, #100]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x114>)
 8002c86:	617b      	str	r3, [r7, #20]
      break;
 8002c88:	e002      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	617b      	str	r3, [r7, #20]
      break;
 8002c8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c90:	4b13      	ldr	r3, [pc, #76]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	fb03 f202 	mul.w	r2, r3, r2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	0e5b      	lsrs	r3, r3, #25
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cd0:	69bb      	ldr	r3, [r7, #24]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3724      	adds	r7, #36	@ 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	08003b68 	.word	0x08003b68
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	007a1200 	.word	0x007a1200

08002cf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	@ (8002d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000000 	.word	0x20000000

08002d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d0c:	f7ff fff0 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0a1b      	lsrs	r3, r3, #8
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4904      	ldr	r1, [pc, #16]	@ (8002d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	08003b60 	.word	0x08003b60

08002d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d38:	f7ff ffda 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	0adb      	lsrs	r3, r3, #11
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4904      	ldr	r1, [pc, #16]	@ (8002d5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	08003b60 	.word	0x08003b60

08002d60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d78:	f7ff f968 	bl	800204c <HAL_PWREx_GetVoltageRange>
 8002d7c:	6178      	str	r0, [r7, #20]
 8002d7e:	e014      	b.n	8002daa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d80:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d84:	4a24      	ldr	r2, [pc, #144]	@ (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d8c:	4b22      	ldr	r3, [pc, #136]	@ (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d98:	f7ff f958 	bl	800204c <HAL_PWREx_GetVoltageRange>
 8002d9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002da8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002db0:	d10b      	bne.n	8002dca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b80      	cmp	r3, #128	@ 0x80
 8002db6:	d919      	bls.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2ba0      	cmp	r3, #160	@ 0xa0
 8002dbc:	d902      	bls.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	e013      	b.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	e010      	b.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b80      	cmp	r3, #128	@ 0x80
 8002dce:	d902      	bls.n	8002dd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	e00a      	b.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b80      	cmp	r3, #128	@ 0x80
 8002dda:	d102      	bne.n	8002de2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ddc:	2302      	movs	r3, #2
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	e004      	b.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b70      	cmp	r3, #112	@ 0x70
 8002de6:	d101      	bne.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002de8:	2301      	movs	r3, #1
 8002dea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dec:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f023 0207 	bic.w	r2, r3, #7
 8002df4:	4909      	ldr	r1, [pc, #36]	@ (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dfc:	4b07      	ldr	r3, [pc, #28]	@ (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d001      	beq.n	8002e0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40022000 	.word	0x40022000

08002e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e28:	2300      	movs	r3, #0
 8002e2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 809e 	beq.w	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e42:	4b46      	ldr	r3, [pc, #280]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00d      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e58:	4b40      	ldr	r3, [pc, #256]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5c:	4a3f      	ldr	r2, [pc, #252]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e62:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e64:	4b3d      	ldr	r3, [pc, #244]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e70:	2301      	movs	r3, #1
 8002e72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e74:	4b3a      	ldr	r3, [pc, #232]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a39      	ldr	r2, [pc, #228]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e80:	f7fe f930 	bl	80010e4 <HAL_GetTick>
 8002e84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e86:	e009      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e88:	f7fe f92c 	bl	80010e4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d902      	bls.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	74fb      	strb	r3, [r7, #19]
        break;
 8002e9a:	e005      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e9c:	4b30      	ldr	r3, [pc, #192]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ef      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d15a      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002eae:	4b2b      	ldr	r3, [pc, #172]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01e      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d019      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002eca:	4b24      	ldr	r3, [pc, #144]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ed4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ed6:	4b21      	ldr	r3, [pc, #132]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002edc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eec:	4a1b      	ldr	r2, [pc, #108]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ef6:	4a19      	ldr	r2, [pc, #100]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d016      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe f8ec 	bl	80010e4 <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f0e:	e00b      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f10:	f7fe f8e8 	bl	80010e4 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d902      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	74fb      	strb	r3, [r7, #19]
            break;
 8002f26:	e006      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f28:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ec      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002f36:	7cfb      	ldrb	r3, [r7, #19]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10b      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f3c:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	4904      	ldr	r1, [pc, #16]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f52:	e009      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f54:	7cfb      	ldrb	r3, [r7, #19]
 8002f56:	74bb      	strb	r3, [r7, #18]
 8002f58:	e006      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f68:	7c7b      	ldrb	r3, [r7, #17]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4b6e      	ldr	r3, [pc, #440]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f72:	4a6d      	ldr	r2, [pc, #436]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f86:	4b68      	ldr	r3, [pc, #416]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8c:	f023 0203 	bic.w	r2, r3, #3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4964      	ldr	r1, [pc, #400]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fa8:	4b5f      	ldr	r3, [pc, #380]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fae:	f023 020c 	bic.w	r2, r3, #12
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	495c      	ldr	r1, [pc, #368]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fca:	4b57      	ldr	r3, [pc, #348]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4953      	ldr	r1, [pc, #332]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fec:	4b4e      	ldr	r3, [pc, #312]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	494b      	ldr	r1, [pc, #300]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800300e:	4b46      	ldr	r3, [pc, #280]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003014:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4942      	ldr	r1, [pc, #264]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003030:	4b3d      	ldr	r3, [pc, #244]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003036:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	493a      	ldr	r1, [pc, #232]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003052:	4b35      	ldr	r3, [pc, #212]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003058:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	4931      	ldr	r1, [pc, #196]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003074:	4b2c      	ldr	r3, [pc, #176]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	4929      	ldr	r1, [pc, #164]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003096:	4b24      	ldr	r3, [pc, #144]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	4920      	ldr	r1, [pc, #128]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d015      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c6:	4918      	ldr	r1, [pc, #96]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030d6:	d105      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d8:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a12      	ldr	r2, [pc, #72]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d015      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fe:	490a      	ldr	r1, [pc, #40]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800310e:	d105      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003110:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a04      	ldr	r2, [pc, #16]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800311a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800311c:	7cbb      	ldrb	r3, [r7, #18]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000

0800312c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a04      	ldr	r2, [pc, #16]	@ (8003148 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003136:	f043 0304 	orr.w	r3, r3, #4
 800313a:	6013      	str	r3, [r2, #0]
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e040      	b.n	80031e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd fbc2 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2224      	movs	r2, #36	@ 0x24
 8003178:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fa82 	bl	800369c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f825 	bl	80031e8 <UART_SetConfig>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e01b      	b.n	80031e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fb01 	bl	80037e0 <UART_CheckIdleState>
 80031de:	4603      	mov	r3, r0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ec:	b08a      	sub	sp, #40	@ 0x28
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	431a      	orrs	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	431a      	orrs	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	4313      	orrs	r3, r2
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	4b9e      	ldr	r3, [pc, #632]	@ (8003490 <UART_SetConfig+0x2a8>)
 8003218:	4013      	ands	r3, r2
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003220:	430b      	orrs	r3, r1
 8003222:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a93      	ldr	r2, [pc, #588]	@ (8003494 <UART_SetConfig+0x2ac>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d004      	beq.n	8003254 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003250:	4313      	orrs	r3, r2
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003264:	430a      	orrs	r2, r1
 8003266:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a8a      	ldr	r2, [pc, #552]	@ (8003498 <UART_SetConfig+0x2b0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d126      	bne.n	80032c0 <UART_SetConfig+0xd8>
 8003272:	4b8a      	ldr	r3, [pc, #552]	@ (800349c <UART_SetConfig+0x2b4>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	2b03      	cmp	r3, #3
 800327e:	d81b      	bhi.n	80032b8 <UART_SetConfig+0xd0>
 8003280:	a201      	add	r2, pc, #4	@ (adr r2, 8003288 <UART_SetConfig+0xa0>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	08003299 	.word	0x08003299
 800328c:	080032a9 	.word	0x080032a9
 8003290:	080032a1 	.word	0x080032a1
 8003294:	080032b1 	.word	0x080032b1
 8003298:	2301      	movs	r3, #1
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800329e:	e0ab      	b.n	80033f8 <UART_SetConfig+0x210>
 80032a0:	2302      	movs	r3, #2
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032a6:	e0a7      	b.n	80033f8 <UART_SetConfig+0x210>
 80032a8:	2304      	movs	r3, #4
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ae:	e0a3      	b.n	80033f8 <UART_SetConfig+0x210>
 80032b0:	2308      	movs	r3, #8
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032b6:	e09f      	b.n	80033f8 <UART_SetConfig+0x210>
 80032b8:	2310      	movs	r3, #16
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032be:	e09b      	b.n	80033f8 <UART_SetConfig+0x210>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a76      	ldr	r2, [pc, #472]	@ (80034a0 <UART_SetConfig+0x2b8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d138      	bne.n	800333c <UART_SetConfig+0x154>
 80032ca:	4b74      	ldr	r3, [pc, #464]	@ (800349c <UART_SetConfig+0x2b4>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b0c      	cmp	r3, #12
 80032d6:	d82d      	bhi.n	8003334 <UART_SetConfig+0x14c>
 80032d8:	a201      	add	r2, pc, #4	@ (adr r2, 80032e0 <UART_SetConfig+0xf8>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	08003315 	.word	0x08003315
 80032e4:	08003335 	.word	0x08003335
 80032e8:	08003335 	.word	0x08003335
 80032ec:	08003335 	.word	0x08003335
 80032f0:	08003325 	.word	0x08003325
 80032f4:	08003335 	.word	0x08003335
 80032f8:	08003335 	.word	0x08003335
 80032fc:	08003335 	.word	0x08003335
 8003300:	0800331d 	.word	0x0800331d
 8003304:	08003335 	.word	0x08003335
 8003308:	08003335 	.word	0x08003335
 800330c:	08003335 	.word	0x08003335
 8003310:	0800332d 	.word	0x0800332d
 8003314:	2300      	movs	r3, #0
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800331a:	e06d      	b.n	80033f8 <UART_SetConfig+0x210>
 800331c:	2302      	movs	r3, #2
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003322:	e069      	b.n	80033f8 <UART_SetConfig+0x210>
 8003324:	2304      	movs	r3, #4
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800332a:	e065      	b.n	80033f8 <UART_SetConfig+0x210>
 800332c:	2308      	movs	r3, #8
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003332:	e061      	b.n	80033f8 <UART_SetConfig+0x210>
 8003334:	2310      	movs	r3, #16
 8003336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800333a:	e05d      	b.n	80033f8 <UART_SetConfig+0x210>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a58      	ldr	r2, [pc, #352]	@ (80034a4 <UART_SetConfig+0x2bc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d125      	bne.n	8003392 <UART_SetConfig+0x1aa>
 8003346:	4b55      	ldr	r3, [pc, #340]	@ (800349c <UART_SetConfig+0x2b4>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003350:	2b30      	cmp	r3, #48	@ 0x30
 8003352:	d016      	beq.n	8003382 <UART_SetConfig+0x19a>
 8003354:	2b30      	cmp	r3, #48	@ 0x30
 8003356:	d818      	bhi.n	800338a <UART_SetConfig+0x1a2>
 8003358:	2b20      	cmp	r3, #32
 800335a:	d00a      	beq.n	8003372 <UART_SetConfig+0x18a>
 800335c:	2b20      	cmp	r3, #32
 800335e:	d814      	bhi.n	800338a <UART_SetConfig+0x1a2>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <UART_SetConfig+0x182>
 8003364:	2b10      	cmp	r3, #16
 8003366:	d008      	beq.n	800337a <UART_SetConfig+0x192>
 8003368:	e00f      	b.n	800338a <UART_SetConfig+0x1a2>
 800336a:	2300      	movs	r3, #0
 800336c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003370:	e042      	b.n	80033f8 <UART_SetConfig+0x210>
 8003372:	2302      	movs	r3, #2
 8003374:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003378:	e03e      	b.n	80033f8 <UART_SetConfig+0x210>
 800337a:	2304      	movs	r3, #4
 800337c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003380:	e03a      	b.n	80033f8 <UART_SetConfig+0x210>
 8003382:	2308      	movs	r3, #8
 8003384:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003388:	e036      	b.n	80033f8 <UART_SetConfig+0x210>
 800338a:	2310      	movs	r3, #16
 800338c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003390:	e032      	b.n	80033f8 <UART_SetConfig+0x210>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a3f      	ldr	r2, [pc, #252]	@ (8003494 <UART_SetConfig+0x2ac>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d12a      	bne.n	80033f2 <UART_SetConfig+0x20a>
 800339c:	4b3f      	ldr	r3, [pc, #252]	@ (800349c <UART_SetConfig+0x2b4>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033aa:	d01a      	beq.n	80033e2 <UART_SetConfig+0x1fa>
 80033ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033b0:	d81b      	bhi.n	80033ea <UART_SetConfig+0x202>
 80033b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033b6:	d00c      	beq.n	80033d2 <UART_SetConfig+0x1ea>
 80033b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033bc:	d815      	bhi.n	80033ea <UART_SetConfig+0x202>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <UART_SetConfig+0x1e2>
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c6:	d008      	beq.n	80033da <UART_SetConfig+0x1f2>
 80033c8:	e00f      	b.n	80033ea <UART_SetConfig+0x202>
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033d0:	e012      	b.n	80033f8 <UART_SetConfig+0x210>
 80033d2:	2302      	movs	r3, #2
 80033d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033d8:	e00e      	b.n	80033f8 <UART_SetConfig+0x210>
 80033da:	2304      	movs	r3, #4
 80033dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033e0:	e00a      	b.n	80033f8 <UART_SetConfig+0x210>
 80033e2:	2308      	movs	r3, #8
 80033e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033e8:	e006      	b.n	80033f8 <UART_SetConfig+0x210>
 80033ea:	2310      	movs	r3, #16
 80033ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033f0:	e002      	b.n	80033f8 <UART_SetConfig+0x210>
 80033f2:	2310      	movs	r3, #16
 80033f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a25      	ldr	r2, [pc, #148]	@ (8003494 <UART_SetConfig+0x2ac>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	f040 808a 	bne.w	8003518 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003404:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003408:	2b08      	cmp	r3, #8
 800340a:	d824      	bhi.n	8003456 <UART_SetConfig+0x26e>
 800340c:	a201      	add	r2, pc, #4	@ (adr r2, 8003414 <UART_SetConfig+0x22c>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003439 	.word	0x08003439
 8003418:	08003457 	.word	0x08003457
 800341c:	08003441 	.word	0x08003441
 8003420:	08003457 	.word	0x08003457
 8003424:	08003447 	.word	0x08003447
 8003428:	08003457 	.word	0x08003457
 800342c:	08003457 	.word	0x08003457
 8003430:	08003457 	.word	0x08003457
 8003434:	0800344f 	.word	0x0800344f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003438:	f7ff fc66 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 800343c:	61f8      	str	r0, [r7, #28]
        break;
 800343e:	e010      	b.n	8003462 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003440:	4b19      	ldr	r3, [pc, #100]	@ (80034a8 <UART_SetConfig+0x2c0>)
 8003442:	61fb      	str	r3, [r7, #28]
        break;
 8003444:	e00d      	b.n	8003462 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003446:	f7ff fbc7 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 800344a:	61f8      	str	r0, [r7, #28]
        break;
 800344c:	e009      	b.n	8003462 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800344e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003452:	61fb      	str	r3, [r7, #28]
        break;
 8003454:	e005      	b.n	8003462 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003460:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8109 	beq.w	800367c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	429a      	cmp	r2, r3
 8003478:	d305      	bcc.n	8003486 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	429a      	cmp	r2, r3
 8003484:	d912      	bls.n	80034ac <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800348c:	e0f6      	b.n	800367c <UART_SetConfig+0x494>
 800348e:	bf00      	nop
 8003490:	efff69f3 	.word	0xefff69f3
 8003494:	40008000 	.word	0x40008000
 8003498:	40013800 	.word	0x40013800
 800349c:	40021000 	.word	0x40021000
 80034a0:	40004400 	.word	0x40004400
 80034a4:	40004800 	.word	0x40004800
 80034a8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	2200      	movs	r2, #0
 80034b0:	461c      	mov	r4, r3
 80034b2:	4615      	mov	r5, r2
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	022b      	lsls	r3, r5, #8
 80034be:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80034c2:	0222      	lsls	r2, r4, #8
 80034c4:	68f9      	ldr	r1, [r7, #12]
 80034c6:	6849      	ldr	r1, [r1, #4]
 80034c8:	0849      	lsrs	r1, r1, #1
 80034ca:	2000      	movs	r0, #0
 80034cc:	4688      	mov	r8, r1
 80034ce:	4681      	mov	r9, r0
 80034d0:	eb12 0a08 	adds.w	sl, r2, r8
 80034d4:	eb43 0b09 	adc.w	fp, r3, r9
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034e6:	4650      	mov	r0, sl
 80034e8:	4659      	mov	r1, fp
 80034ea:	f7fc fe6f 	bl	80001cc <__aeabi_uldivmod>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4613      	mov	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034fc:	d308      	bcc.n	8003510 <UART_SetConfig+0x328>
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003504:	d204      	bcs.n	8003510 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	e0b5      	b.n	800367c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003516:	e0b1      	b.n	800367c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003520:	d15d      	bne.n	80035de <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003522:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003526:	2b08      	cmp	r3, #8
 8003528:	d827      	bhi.n	800357a <UART_SetConfig+0x392>
 800352a:	a201      	add	r2, pc, #4	@ (adr r2, 8003530 <UART_SetConfig+0x348>)
 800352c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003530:	08003555 	.word	0x08003555
 8003534:	0800355d 	.word	0x0800355d
 8003538:	08003565 	.word	0x08003565
 800353c:	0800357b 	.word	0x0800357b
 8003540:	0800356b 	.word	0x0800356b
 8003544:	0800357b 	.word	0x0800357b
 8003548:	0800357b 	.word	0x0800357b
 800354c:	0800357b 	.word	0x0800357b
 8003550:	08003573 	.word	0x08003573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003554:	f7ff fbd8 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8003558:	61f8      	str	r0, [r7, #28]
        break;
 800355a:	e014      	b.n	8003586 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800355c:	f7ff fbea 	bl	8002d34 <HAL_RCC_GetPCLK2Freq>
 8003560:	61f8      	str	r0, [r7, #28]
        break;
 8003562:	e010      	b.n	8003586 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003564:	4b4c      	ldr	r3, [pc, #304]	@ (8003698 <UART_SetConfig+0x4b0>)
 8003566:	61fb      	str	r3, [r7, #28]
        break;
 8003568:	e00d      	b.n	8003586 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800356a:	f7ff fb35 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 800356e:	61f8      	str	r0, [r7, #28]
        break;
 8003570:	e009      	b.n	8003586 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003576:	61fb      	str	r3, [r7, #28]
        break;
 8003578:	e005      	b.n	8003586 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003584:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d077      	beq.n	800367c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005a      	lsls	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	441a      	add	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b0f      	cmp	r3, #15
 80035a6:	d916      	bls.n	80035d6 <UART_SetConfig+0x3ee>
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ae:	d212      	bcs.n	80035d6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f023 030f 	bic.w	r3, r3, #15
 80035b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	8afb      	ldrh	r3, [r7, #22]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	8afa      	ldrh	r2, [r7, #22]
 80035d2:	60da      	str	r2, [r3, #12]
 80035d4:	e052      	b.n	800367c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035dc:	e04e      	b.n	800367c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d827      	bhi.n	8003636 <UART_SetConfig+0x44e>
 80035e6:	a201      	add	r2, pc, #4	@ (adr r2, 80035ec <UART_SetConfig+0x404>)
 80035e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ec:	08003611 	.word	0x08003611
 80035f0:	08003619 	.word	0x08003619
 80035f4:	08003621 	.word	0x08003621
 80035f8:	08003637 	.word	0x08003637
 80035fc:	08003627 	.word	0x08003627
 8003600:	08003637 	.word	0x08003637
 8003604:	08003637 	.word	0x08003637
 8003608:	08003637 	.word	0x08003637
 800360c:	0800362f 	.word	0x0800362f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003610:	f7ff fb7a 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8003614:	61f8      	str	r0, [r7, #28]
        break;
 8003616:	e014      	b.n	8003642 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003618:	f7ff fb8c 	bl	8002d34 <HAL_RCC_GetPCLK2Freq>
 800361c:	61f8      	str	r0, [r7, #28]
        break;
 800361e:	e010      	b.n	8003642 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003620:	4b1d      	ldr	r3, [pc, #116]	@ (8003698 <UART_SetConfig+0x4b0>)
 8003622:	61fb      	str	r3, [r7, #28]
        break;
 8003624:	e00d      	b.n	8003642 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003626:	f7ff fad7 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 800362a:	61f8      	str	r0, [r7, #28]
        break;
 800362c:	e009      	b.n	8003642 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800362e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003632:	61fb      	str	r3, [r7, #28]
        break;
 8003634:	e005      	b.n	8003642 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003640:	bf00      	nop
    }

    if (pclk != 0U)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d019      	beq.n	800367c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	085a      	lsrs	r2, r3, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	441a      	add	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b0f      	cmp	r3, #15
 8003660:	d909      	bls.n	8003676 <UART_SetConfig+0x48e>
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003668:	d205      	bcs.n	8003676 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60da      	str	r2, [r3, #12]
 8003674:	e002      	b.n	800367c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003688:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800368c:	4618      	mov	r0, r3
 800368e:	3728      	adds	r7, #40	@ 0x28
 8003690:	46bd      	mov	sp, r7
 8003692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003696:	bf00      	nop
 8003698:	00f42400 	.word	0x00f42400

0800369c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01a      	beq.n	80037b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800379a:	d10a      	bne.n	80037b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	605a      	str	r2, [r3, #4]
  }
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b098      	sub	sp, #96	@ 0x60
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037f0:	f7fd fc78 	bl	80010e4 <HAL_GetTick>
 80037f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b08      	cmp	r3, #8
 8003802:	d12e      	bne.n	8003862 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003804:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380c:	2200      	movs	r2, #0
 800380e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f88c 	bl	8003930 <UART_WaitOnFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d021      	beq.n	8003862 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003826:	e853 3f00 	ldrex	r3, [r3]
 800382a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800382c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003832:	653b      	str	r3, [r7, #80]	@ 0x50
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800383c:	647b      	str	r3, [r7, #68]	@ 0x44
 800383e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003840:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003844:	e841 2300 	strex	r3, r2, [r1]
 8003848:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800384a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e6      	bne.n	800381e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e062      	b.n	8003928 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b04      	cmp	r3, #4
 800386e:	d149      	bne.n	8003904 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003870:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003878:	2200      	movs	r2, #0
 800387a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f856 	bl	8003930 <UART_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d03c      	beq.n	8003904 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	623b      	str	r3, [r7, #32]
   return(result);
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800389e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80038aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e6      	bne.n	800388a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3308      	adds	r3, #8
 80038c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	e853 3f00 	ldrex	r3, [r3]
 80038ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3308      	adds	r3, #8
 80038da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038dc:	61fa      	str	r2, [r7, #28]
 80038de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	69b9      	ldr	r1, [r7, #24]
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	617b      	str	r3, [r7, #20]
   return(result);
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e5      	bne.n	80038bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e011      	b.n	8003928 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3758      	adds	r7, #88	@ 0x58
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003940:	e04f      	b.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d04b      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394a:	f7fd fbcb 	bl	80010e4 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	429a      	cmp	r2, r3
 8003958:	d302      	bcc.n	8003960 <UART_WaitOnFlagUntilTimeout+0x30>
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e04e      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	d037      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b80      	cmp	r3, #128	@ 0x80
 8003976:	d034      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b40      	cmp	r3, #64	@ 0x40
 800397c:	d031      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b08      	cmp	r3, #8
 800398a:	d110      	bne.n	80039ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2208      	movs	r2, #8
 8003992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f838 	bl	8003a0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2208      	movs	r2, #8
 800399e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e029      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039bc:	d111      	bne.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f81e 	bl	8003a0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e00f      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4013      	ands	r3, r2
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	bf0c      	ite	eq
 80039f2:	2301      	moveq	r3, #1
 80039f4:	2300      	movne	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d0a0      	beq.n	8003942 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b095      	sub	sp, #84	@ 0x54
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a30:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e6      	bne.n	8003a12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3308      	adds	r3, #8
 8003a4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3308      	adds	r3, #8
 8003a62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e5      	bne.n	8003a44 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d118      	bne.n	8003ab2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f023 0310 	bic.w	r3, r3, #16
 8003a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	6979      	ldr	r1, [r7, #20]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e6      	bne.n	8003a80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ac6:	bf00      	nop
 8003ac8:	3754      	adds	r7, #84	@ 0x54
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <memset>:
 8003ad2:	4402      	add	r2, r0
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d100      	bne.n	8003adc <memset+0xa>
 8003ada:	4770      	bx	lr
 8003adc:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae0:	e7f9      	b.n	8003ad6 <memset+0x4>
	...

08003ae4 <__libc_init_array>:
 8003ae4:	b570      	push	{r4, r5, r6, lr}
 8003ae6:	4d0d      	ldr	r5, [pc, #52]	@ (8003b1c <__libc_init_array+0x38>)
 8003ae8:	4c0d      	ldr	r4, [pc, #52]	@ (8003b20 <__libc_init_array+0x3c>)
 8003aea:	1b64      	subs	r4, r4, r5
 8003aec:	10a4      	asrs	r4, r4, #2
 8003aee:	2600      	movs	r6, #0
 8003af0:	42a6      	cmp	r6, r4
 8003af2:	d109      	bne.n	8003b08 <__libc_init_array+0x24>
 8003af4:	4d0b      	ldr	r5, [pc, #44]	@ (8003b24 <__libc_init_array+0x40>)
 8003af6:	4c0c      	ldr	r4, [pc, #48]	@ (8003b28 <__libc_init_array+0x44>)
 8003af8:	f000 f818 	bl	8003b2c <_init>
 8003afc:	1b64      	subs	r4, r4, r5
 8003afe:	10a4      	asrs	r4, r4, #2
 8003b00:	2600      	movs	r6, #0
 8003b02:	42a6      	cmp	r6, r4
 8003b04:	d105      	bne.n	8003b12 <__libc_init_array+0x2e>
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
 8003b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0c:	4798      	blx	r3
 8003b0e:	3601      	adds	r6, #1
 8003b10:	e7ee      	b.n	8003af0 <__libc_init_array+0xc>
 8003b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b16:	4798      	blx	r3
 8003b18:	3601      	adds	r6, #1
 8003b1a:	e7f2      	b.n	8003b02 <__libc_init_array+0x1e>
 8003b1c:	08004730 	.word	0x08004730
 8003b20:	08004730 	.word	0x08004730
 8003b24:	08004730 	.word	0x08004730
 8003b28:	08004734 	.word	0x08004734

08003b2c <_init>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	bf00      	nop
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr

08003b38 <_fini>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	bf00      	nop
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr
